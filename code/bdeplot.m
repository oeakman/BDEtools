function bdeplot(sol, varargin)
% function bdeplot(sol, varargin)
%
% BDEPLOT   Plot multiple Boolean timeseries.
%
% bdeplot(sol)
% bdeplot(sol, offset)
% bdeplot(sol, offset, moveup)
% bdeplot(sol, [], moveup)
% bdeplot(sol, offset, moveup, col)
%
% OUTPUTS
%
% None (the plot only). 
% 
% INPUTS
%
% sol: Structure generated by e.g. bdediscrete or bdesolve, with following fields - 
% sol.x: A vector with the times of switch points.
% sol.y: A Boolean matrix with n rows where n is the number of state variables. Each column is the state following each switch.
% 
% varargin{1} -
% offset: An offset to displace individual timeseries plots vertically. The default value is 0.1. 
% varargin{2} -
% moveup: A shift to displace all timeseries plots vertically. The default value is 0. 
% varargin{3} -
% col: The plot colour.
%
% DEPENDENCIES 
%
% None.
%
% -------------------------------------------------------------------------
%
% Written by Ozgur Akman & Kevin Doherty, University of Exeter, 2017
% O.E.Akman@exeter.ac.uk
% k.doherty@exeter.ac.uk
%
% Code review by Ozgur Akman, University of Exeter, 2019
%
% Part of the BDEtools package, Â© Akman Laboratory of Automated Biotechnology, 2021
%

% Get required quantities.

x = sol.x;
y = sol.y;

% Set the default offset.

if nargin > 1 && ~isempty(varargin{1})    
    offset = varargin{1};    
else     
    offset = 0.1;    
end
   
% Set the default displacment.

if nargin > 2 && ~isempty(varargin{2})    
    moveup = varargin{2};    
else    
    moveup = 0;    
end

numx = 2 * (numel(x) - 2) + 2;
xfun = zeros(1, numx);
yfun = zeros(numel(y(:, 1)), numx); 
xfun(1:2:end-1) = x(1:end-1);
xfun(2:2:end) = x(2:end);
yfun(:, 1:2:end-1) = y(:, 1:end-1);
yfun(:, 2:2:end) = y(:, 1:end-1); 
numVars = numel(y(:, 1));

% Set y-axis tickmarks.

tickPos = zeros(1, numVars);
tickPos(1) = 0.5;

% Implement offset.

for i = 2:numVars
    yfun(i, :) = yfun(i, :) + (i-1)*offset;
    tickPos(i) = tickPos(i-1) + 1;
end

% Plot the Boolean timeseries.

if ~ishold
    hold on;
end

if nargin > 3
    col = varargin{3};
    plot(xfun, yfun + moveup, col);
else
    plot(xfun, yfun + moveup);
end

% Indicate the vertical displacement on the plot (consistency check).

yt = yticks;
yt = [yt moveup+offset*[1:numVars-1]];
yt = unique(yt);
yt = sort(yt);
yticks(yt);

end
