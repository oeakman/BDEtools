function matout = bdeautocorr(sol, varin, tshiftvec, persolflag, pktol)
% function matout = bdeautocorr(sol, varin, tshiftvec, persolflag, pktol)
%
% BDEAUTORCORR   Computes the autocorrelation of a BDE solution variable, and – if requested – uses this to estimate the period of the solution variable.
%
% matout = bdeautocorr(sol, varin, tshiftvec)
% matout = bdeautocorr(sol, varin, tshiftvec, persolflag)
% matout = bdeautocorr(sol, varin, tshiftvec, persolflag, pktol)
% matout = bdeautocorr(sol, varin, tshiftvec, persolflag, [])
% matout = bdeautocorr(sol, varin, tshiftvec, [], pktol)
% matout = bdeautocorr(sol, varin, tshiftvec, [], [])
%
% OUTPUTS
%
% matout: A structure, with the following fields (in addition to the inputs sol, varin, tshiftvec, pktol and the routine name) - 
% matout.acvals: A vector of Boolean autocorrelation values.
% matout.per: The estimated period (OPTIONAL).
% matout.persol: A structure, contating one period of the chosen variable of the inputted solution, with the following fields (OPTIONAL)-
% matout.persol.x: A vector with the times of switch points.
% matout.persol.y: A Boolean vector in which each entry is the state following each switch.
%
% INPUTS 
%
% sol: A structure generated by e.g. bdesolve, with the following fields - 
% sol.x: A vector with the times of switch points.
% sol.y: A Boolean matrix with n rows where n is the number of state variables. Each column is the state following each switch.
% varin: The variable for which to compute the autocorrelation.
% tshiftvec: The vector of time lags with which to compute the autocorrelation.
% persolflag: A Boolean variable which when set to true, estimates the period of the solution variable and extracts one period from the timeseries
%             (OPTIONAL: default value is true).
% pktol: The tolerance used to compute peaks of the autocorrelation function, when estimating period (OPTIONAL: default value is 0.99). 
%
% DEPENDENCIES
%
% bdesep, bdecut, bdedist.
%
% SEE ALSO.
%
% bdesolve.
%
% -------------------------------------------------------------------------
%
% Written by Ozgur Akman, University of Exeter, 2022
% O.E.Akman@exeter.ac.uk
%
% Part of the BDEtools package, © Akman Laboratory of Automated Biotechnology, 2021
%

matout.sol = sol;
matout.varin = varin;
matout.tshiftvec = tshiftvec;

% Defualt is to find the period (and corresponding periodic solution).

if nargin < 4 || isempty(persolflag)
    persolflag = true;
end

% Set the default peak tolerance.

if nargin < 5 || isempty(pktol)
    pktol = 0.99;
end

% Extract the required timeseries.

sol = bdesep(sol, varin);
tEnd = sol.x(end);

% Loop over all the specified time shifts.

for k = 1 : length(tshiftvec)
   
    % Shift and truncate.
    
    ksol1 = sol;
    ksol2 = sol;
    ksol1.x = ksol1.x + tshiftvec(k);
    [ksol1, ~] = bdecut(ksol1, ksol2.x(end));
    [~, ksol2] = bdecut(ksol2, ksol1.x(1));

    % Compute the Hamming distance between the original and shifted solutions.

    hval = bdedist(ksol1, ksol2);

    % Normalise by the time interval over which the distance is calculated.

    acvals(k) = hval/(ksol1.x(end) - ksol1.x(1));
    acvals(k) = 1 - acvals(k);

end

matout.acvals = acvals;

% If requested, compute the period from the autorcorrelation spectrum and extract one period of the inputted solution.

if persolflag 
    
    matout.pktol = pktol;

    % Find the peaks in the autocorrelation spectrum.

    [~, tmax] = findpeaks(acvals, tshiftvec, 'MinPeakHeight', pktol);

    % Compute the period as the first global maximum, if it exists.

    if isempty(tmax)    
        persol = [];
    else
        per = tmax(1);
        in = find(sol.y == 1);
        fsw = sol.x(in(2));
        [~, persol] = bdecut(sol, fsw);
        persol.y(1) = true;
        persol.x = persol.x - persol.x(1);                
        pin = find(persol.x >= per);
        persol.x(pin(2):end) = [];
        persol.y(pin(2):end) = [];        
    end
    
    matout.per = per;    
    matout.persol = persol;
    
end

% Save the routine information.

matout.routine = @bdeautocorr;

end