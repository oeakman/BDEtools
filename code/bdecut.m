function [sol1, sol2] = bdecut(sol, xCut)
% function [sol1, sol2] = bdecut(sol, xCut)
%
% BDECUT   Cuts a BDE solution about a given timepoint and returns the two solutions lying either side of the cut.
%
% [sol1, sol2] = bdecut(sol, xCut)
%
% OUTPUTS
%
% sol1: Structure containing solution for timepoints lying to the left of the cut. 
% sol2: Structure containing solution for timepoints lying to the right of the cut.
%
% INPUTS 
%
% sol: A structure generated by e.g. bdediscret, with the following fields - 
% sol.x: A vector with the times of switch points.
% sol.y: A Boolean matrix with n rows where n is the number of state variables. Each column is the state following each switch.
%
% xCut: The point about which to cut. 
%
% DEPENDENCIES
%
% None.
%
% SEE ALSO.
%
% bdejoin (inverse function).
%
% -------------------------------------------------------------------------
%
% Written by Kevin Doherty & Ozgur Akman, University of Exeter, 2017
% k.doherty@exeter.ac.uk
% O.E.Akman@exeter.ac.uk
%
% Code review by Ozgur Akman, University of Exeter, 2019
%
% Part of the BDEtools package, Â© Akman Laboratory of Automated Biotechnology, 2021
%

if xCut < sol.x(1) || xCut > sol.x(end)    
    error('xCut should be in the range of sol.x.')    
end

if isequal(sol.x(1), xCut)    
    sol1 = [];    
    sol2 = sol;    
    return    
end

% Generate solution lying to the left of the cut, including the cut itself.

sol1.x = sol.x(sol.x < xCut);
sol1.x = [sol1.x, xCut];
sol1.y = sol.y(:, sol.x < xCut);
sol1.y = [sol1.y, sol1.y(:, end)];

% Generate solution lying to the right of the cut, including the cut itself.

sol2.x = sol.x(sol.x > xCut);
sol2.x = [xCut, sol2.x];
sol2.y = sol.y(:, sol.x > xCut);
sol2.y = [sol1.y(:, end), sol2.y];

end