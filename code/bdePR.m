function solPR = bdePR(sol, varargin)
% function solPR = bdePR(sol, varargin)
%
% BDEPR   Prepare a BDE solution for plotting.
%
% solPR = bdePR(sol)
% solPR = bdePR(sol, offset)
% solPR = bdePR(sol, offset, shift)
% solPR = bdePR(sol, [], shift)
%
% OUTPUT
%
% solPR: Structure containing the prepared solution. 
% 
% INPUTS
%
% sol: Structure generated by e.g. bdediscrete or bdesolve, with following fields - 
% sol.x: A vector with the times of switch points.
% sol.y: A Boolean matrix with n rows where n is the number of state variables. Each column is the state following each switch.
% 
% varargin{1} -
% offset: An offset to displace individual timeseries plots vertically.
% varargin{2} -
% shift: A shift to displace all timeseries plots vertically. 
%
% DEPENDENCIES 
%
% None.
%
% -------------------------------------------------------------------------
%
% Written by Kevin Doherty, University of Exeter, 2017
% k.doherty@exeter.ac.uk
%
% Code review by Ozgur Akman, University of Exeter, 2019
% O.E.Akman@exeter.ac.uk
%
% Part of the BDEtools package, Â© Akman Laboratory of Automated Biotechnology, 2021
%

if isequal(sol.y(:, end),sol.y(:, end - 1)) % If there is no switch at the final point.
    
    numx = 2 * (numel(sol.x) - 2) + 2;
    solPR.x = zeros(1, numx);
    solPR.y = zeros(numel(sol.y(:, 1)), numx);
    solPR.x(1:2:end-1) = sol.x(1:end-1);
    solPR.x(2:2:end) = sol.x(2:end);
    solPR.y(:, 1:2:end-1) = sol.y(:, 1:end-1);
    solPR.y(:, 2:2:end) = sol.y(:, 1:end-1); 
    
else % If a switch occurs at the final point then we need to include a line there.
    
    numx = 2 * (numel(sol.x) - 2) + 3;
    solPR.x = zeros(1, numx);
    solPR.y = zeros(numel(sol.y(:, 1)), numx);
    solPR.x(1:2:end) = sol.x(1:end);
    solPR.x(2:2:end-1) = sol.x(2:end);
    solPR.y(:, 1:2:end) = sol.y(:, 1:end);
    solPR.y(:, 2:2:end-1) = sol.y(:, 1:end-1);
    
end

if nargin > 1 && ~isempty(varargin{1})
    
    offset = varargin{1};
    
    for i = 2: numel(solPR.y(:, 1)) 
        
        solPR.y(i, :) = solPR.y(i, :) + (i - 1) * offset;        
        
    end
    
end

if nargin > 2     
    
    shift = varargin{2};    
    solPR.y = solPR.y + shift;
    
end

end